<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Shivam Daryanani's Blog]]></title>
  <link href="http://shivamd.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://shivamd.github.io/"/>
  <updated>2013-11-14T11:19:07+04:00</updated>
  <id>http://shivamd.github.io/</id>
  <author>
    <name><![CDATA[Shivam Daryanani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating Email Accounts on Your Domain Dynamically]]></title>
    <link href="http://shivamd.github.io/blog/2013/11/14/creating-email-accounts-on-your-domain-dynamically/"/>
    <updated>2013-11-14T09:40:00+04:00</updated>
    <id>http://shivamd.github.io/blog/2013/11/14/creating-email-accounts-on-your-domain-dynamically</id>
    <content type="html"><![CDATA[<p>For an app I am working on, I needed to create an email account on my domain based on the user&rsquo;s input. For example the user signed up as &lsquo;johndoe&rsquo;, I had to create an email for them <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#58;&#106;&#111;&#x68;&#x6e;&#100;&#111;&#x65;&#x40;&#109;&#121;&#100;&#111;&#109;&#x61;&#105;&#110;&#46;&#99;&#111;&#109;&#46;">&#106;&#111;&#104;&#x6e;&#100;&#x6f;&#x65;&#64;&#109;&#x79;&#x64;&#111;&#x6d;&#97;&#x69;&#x6e;&#x2e;&#99;&#x6f;&#x6d;&#46;</a> Initially I thought this would be difficult, but it turned out to be simple thanks to <a href="http://dnsimple.com">DNSimple</a>.</p>

<h3>Attempt#1</h3>

<p>After searching stackoverflow for a few hours, I posted a <a href="http://stackoverflow.com/questions/19866040/how-to-create-an-email-address-on-your-domain-dynamically">question</a> on asking how can this be done. Thanks to <a href="http://stackoverflow.com/users/1385773/ludovic">Ludovic</a> who mentioned I can use the API of my host service. I didn&rsquo;t know it would be that easy and luckily my host service, <a href="http://www.namecheap.com/">Namecheap</a>, has an <a href="http://developer.namecheap.com/docs/">API</a>. I signed up for a key and within 24 hours got access to it. I was able to <a href="http://developer.namecheap.com/docs/doku.php?id=api-reference:domains.dns:setcustom">set up email forwarding</a>, but due to the API being in beta stage there are a few caveats. First the API is only available during specific hours, which wasn&rsquo;t too bad. However the API was expected to be used through a set IP address and this was a deal breaker. In order to get this up on Heroku meant using the <a href="https://addons.heroku.com/proximo">Proximo</a> addon which is too expensive for my budget. I scraped this and starting looking for an easier way.</p>

<h3>DNSimple To The Rescue</h3>

<p>I had heard a lot of about DNSimple and their ease on managing domain settings. This topic always confuses me, but their brilliant UI and well documented options make it very easy to use. The best part was they have a full featured <a href="http://developer.dnsimple.com/">API</a> which is exactly what I needed. DNSimple comes with a 30day trial, but I signed up for their bronze plan. The request needed to get all email forwards for you app:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl  -H &amp;lsquo;X-DNSimple-Token: youraddress@gmail.com:APIToken&amp;rsquo; <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  -H <span class="s1">&#39;Accept: application/json&#39;</span> <span class="se">\</span>
</span><span class='line'>  https://dnsimple.com/domains/example.com/email_forwards
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is a get request with the headers notifying that you want a JSON response and a header specifying your email and API token. You can obtain your API token from the <a href="https://dnsimple.com/account">account page</a>, don&rsquo;t confuse this with the domain key that DNSimple provides.
In order to create an email forward, you will need to make a post request:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl  -H &amp;lsquo;X-DNSimple-Token: youraddress@gmail.com:APIToken&amp;rsquo; <span class="se">\&lt;</span>/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;  -H <span class="s1">&#39;Accept: application/json&#39;</span> <span class="se">\</span>
</span><span class='line'>  -H <span class="s1">&#39;Content-Type: application/json&#39;</span> <span class="se">\</span>
</span><span class='line'>  -X POST <span class="se">\</span>
</span><span class='line'>  -d <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">      &quot;email_forward&quot;: {</span>
</span><span class='line'><span class="s1">        &quot;from&quot;: &quot;john&quot;,</span>
</span><span class='line'><span class="s1">        &quot;to&quot;: &quot;someone@example.com&quot;</span>
</span><span class='line'><span class="s1">      }</span>
</span><span class='line'><span class="s1">  }&#39;</span> <span class="se">\</span>
</span><span class='line'>  https://dnsimple.com/domains/example.com/email_forward
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
This time we have an additional header, setting the content-type to be JSON as we will be sending JSON. We also need to specify a post request, which is indicated by -X. Finally we have to send the data with -d. All emails that get sent to <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#58;&#106;&#111;&#x68;&#110;&#x40;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#109;">&#x6a;&#x6f;&#x68;&#110;&#64;&#x65;&#120;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#99;&#x6f;&#x6d;</a> will be forwarded to <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;&#x73;&#111;&#x6d;&#x65;&#x6f;&#110;&#x65;&#64;&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;&#x2e;">&#115;&#111;&#109;&#x65;&#x6f;&#110;&#101;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#x6f;&#109;&#46;</a></p>

<p>You can send a post request with headers in a Rails app using the <code>system</code> method(you&rsquo;ll paste in the same script)  but I prefer to make a post request using the <a href="https://github.com/jnunemaker/httparty">HTTParty</a> gem as it&rsquo;s cleaner. The same post request in ruby:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">httparty</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;https://dnsimple.com/domains/example.com/email_forwards&quot;</span><span class="o">&gt;</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">dnsimple</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">domains</span><span class="o">/</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">email_forwards</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;</span>
</span><span class='line'><span class="sr">HTTParty.post(url,&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>          <span class="ss">body</span><span class="p">:</span> <span class="p">{</span> <span class="s2">&quot;email_forward&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>                       <span class="p">{</span>
</span><span class='line'>                         <span class="s2">&quot;from&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;john&quot;</span><span class="p">,</span>
</span><span class='line'>                          <span class="s2">&quot;to&quot;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;someone@example.com&quot;</span>
</span><span class='line'>                       <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">headers</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s1">&#39;X-DNSimple-Token&#39;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;youraddress@gmail.com:APIToken&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;Accept&#39;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">}</span>
</span><span class='line'>         <span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That will create the same result as the script above,  don&rsquo;t forget to call <code>to_json</code> on the body.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Dynamic Cron Jobs in Rails]]></title>
    <link href="http://shivamd.github.io/blog/2013/11/09/create-dynamic-cron-jobs-in-rails/"/>
    <updated>2013-11-09T03:38:00+04:00</updated>
    <id>http://shivamd.github.io/blog/2013/11/09/create-dynamic-cron-jobs-in-rails</id>
    <content type="html"><![CDATA[<p>I have used the likes of <a href="https://github.com/collectiveidea/delayed_job">Delayed Jobs</a> and <a href="https://github.com/mperham/sidekiq">Sidekiq</a> in previous apps, but for an app I am working on I had to create cron jobs based on user settings. I needed someway to iterate over the user&rsquo;s settings and create the crons needed. I came across the <a href="https://github.com/javan/whenever">whenever</a> gem that makes it easy to create cron jobs. With a little tweaking I was able to create cron jobs based on a user&rsquo;s setting.</p>

<h3>Gem installation</h3>

<p>In your Gemfile:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">whenever</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="nb">require</span> <span class="ss">:false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
The reason we add require false is because whenever creates cron jobs outside of the rails app.</p>

<p>Next run the following command from the root of your app:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">wheneverize</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This will create a schedule.rb in the config file, this is where your logic for setting up crons will be. You can have a look at this <a href="http://railscasts.com/episodes/164-cron-in-ruby">railscasts</a> on how to setup crons.</p>

<h3>Requiring the rails app</h3>

<p>In order to have access to your models inside the file, you need to require the application. This can be done with the following line.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">.</span><span class="n">/</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">+</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;) + &amp;ldquo;/en</span><span class="n">vironment</span><span class="o">.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will load up the application which gives us access to our rails models. Now let&rsquo;s say you have many users with different reminder settings.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">.</span><span class="n">/</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">+</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;) + &amp;ldquo;/en</span><span class="n">vironment</span><span class="o">.</span><span class="n">rb</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:output</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{path}/log/cron.log&amp;rdquo; #logs</span>
</span><span class='line'><span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="vi">@users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="n">every</span> <span class="n">user</span><span class="o">.</span><span class="n">reminder_frequency</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="ss">at</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">reminder_time</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;runner &quot;user.send_reminder&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>reminder_frequency</strong> can contain for example: &ldquo;sunday&rdquo; or &ldquo;weekday"<br/>
<strong>reminder_time</strong> contains the timestamp: "6:00pm&rdquo;</p>

<p>This will create the cron jobs for every user.
Running the following command will confirm that:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>whenever
</span></code></pre></td></tr></table></div></figure></notextile></div>
There are many different solutions out there for scheduled jobs, whenever makes it really easy with it&rsquo;s syntax and simplicity.
Let me know if you have any questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Receiving Email in a Rails App]]></title>
    <link href="http://shivamd.github.io/blog/2013/11/07/receiving-email-in-a-rails-app/"/>
    <updated>2013-11-07T02:07:00+04:00</updated>
    <id>http://shivamd.github.io/blog/2013/11/07/receiving-email-in-a-rails-app</id>
    <content type="html"><![CDATA[<p>Receiving email in a Rails app can be tricky. The Action Mailer library has minimal support for this and it can be quite tricky. This is where SendGrid&rsquo;s <a href="http://sendgrid.com/docs/API_Reference/Webhooks/parse.html">parse API</a> comes in along with the gem released by ThoughtBot called <a href="http://github.com/thoughtbot/griddler">Griddler</a>.</p>

<h3>Setup</h3>

<p>Start of by adding the griddler gem to your gemfile.</p>

<p><code>
gem "griddler"
</code>
Followed by a bundle install. If you run rake routes, you will see Griddler has created a route to receive mails on.
If you need to edit this route, you can paste it in your routes file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">/</span><span class="n">email_processor</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">griddler</span><span class="o">/</span><span class="n">emails</span><span class="c1">#create&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>By default Griddler will look for an EmailProcessor class. You can create one in the models folder.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/email_processor.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EmailProcessor</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">process</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;#create models, process reports etc.</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These are the following attributes available on the email received.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.to
</span><span class='line'>.from
</span><span class='line'>.subject
</span><span class='line'>.body
</span><span class='line'>.raw_text
</span><span class='line'>.raw_html
</span><span class='line'>.raw_body
</span><span class='line'>.attachments
</span><span class='line'>.headers
</span><span class='line'>.raw_headers</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Email server setup</h3>

<p>For my app I ended up using SendGrid, which has an add-on for Heroku. Once your account is setup, go the <a href="http://sendgrid.com/developer/reply">parse webhook settings page</a>.</p>

<p><img class="center" src="/images/sendgrid_settings.png"></p>

<p><strong>In order for this to work you need a domain name</strong>. Your site doesn&rsquo;t necessarily have to be deployed on it. Enter the domain you are going to use in the domain field. For the URI enter the route where you want to receive mails. I have used <a href="http://ngrok.com/">Ngrok</a> as I wanted to test it in development.</p>

<p>The last part needed in order to receive emails is to point your domain&rsquo;s MX record to, in this case, mx.sendgrid.net.
What is a MX record?
The full form is Mail Exchanger record. It specifies how email should be routed for a particular domain. It specifies a mail server, in this case sendgrid, for accepting emails for your domain.
Go to your domain settings and create a MX record which points to mx.sendgrid.net. An example for <a href="http://namecheap.com">Namecheap</a> would look like this.
You will also need to setup an email for your domain, by default namecheap creates an <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#x69;&#110;&#102;&#111;&#64;&#x79;&#x6f;&#117;&#114;&#x64;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#x63;&#x6f;&#x6d;&#x2e;">&#105;&#110;&#x66;&#x6f;&#64;&#x79;&#x6f;&#x75;&#x72;&#100;&#x6f;&#109;&#97;&#105;&#110;&#46;&#x63;&#x6f;&#109;&#x2e;</a></p>

<p><img class="center" src="/images/namecheap.png"></p>

<p>And that&rsquo;s it! Start your rails server along with ngrok or a localtunnel. Give it a go send an email to the address you created in the domain settings.
In my case this would be <a href="&#x6d;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x69;&#110;&#102;&#x6f;&#64;&#115;&#104;&#x69;&#118;&#x61;&#x6d;&#x64;&#97;&#x72;&#x79;&#97;&#x6e;&#x61;&#x6e;&#x69;&#46;&#99;&#111;&#x6d;">&#x69;&#x6e;&#x66;&#x6f;&#x40;&#x73;&#x68;&#105;&#x76;&#x61;&#x6d;&#100;&#97;&#114;&#x79;&#97;&#x6e;&#97;&#110;&#105;&#x2e;&#x63;&#111;&#109;</a> and boom you should have received a post message from Sendgrid. You would want to put a debugger inside the method to play around with email object that Griddler gives you.
The SendGrid API expects a 200 response from your endpoint. If it doesn&rsquo;t get it or if your site is down, it tries up to 3 times in set intervals until it reaches your app. Which is great if your site is under maintenance.</p>

<h3>Why would I want to receive email?</h3>

<p>That&rsquo;s a good question. A lot of sites create their support tickets in this way. Once you email support@domain.com, it parses the email and creates the ticket. Also here is a list of creative ideas:</p>

<ul>
<li><a href="https://thebirdy.com/">The Birdy</a></li>
<li><a href="http://www.nudgemail.com/">Nudge Mail</a></li>
<li><a href="https://idonethis.com/">IDoneThis</a></li>
</ul>


<p>Hope this was useful let me know if you come across any roadblocks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nested Attributes in Rails 4]]></title>
    <link href="http://shivamd.github.io/blog/2013/11/03/nested-attributes-in-rails-4/"/>
    <updated>2013-11-03T23:24:00+04:00</updated>
    <id>http://shivamd.github.io/blog/2013/11/03/nested-attributes-in-rails-4</id>
    <content type="html"><![CDATA[<p>Often when creating a web application there comes a time where two models are related and you want to create one form where you can add both the attributes. Let&rsquo;s say you have a topic model which has many questions, and you want to create the topic and questions for it in one form. Rails makes this easy with the accepts_nested_attributes_for method.</p>

<h3>Models</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/topic.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/question.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Question</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:topic</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In order for the topic form to be able to add questions, we need the following line:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/topic.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:questions</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Accepts nested attributes is just a shortcut, it defines a dynamic attribute {field_name}_attributes so you can automatically assign them to an association. The allow destroy lets you destroy question objects in this case through the form, it is set to false from the start. There are other methods you can use with this, such as reject_if, limit and  update_only. More information can be found from the <a href="http://apidock.com/rails/ActiveRecord/NestedAttributes/ClassMethods/accepts_nested_attributes_for">source</a>.</p>

<h3>Form</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= form_for @topic do |f| %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;  &lt;div id=</span><span class="s2">&quot;name&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;field&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&amp;lt;%= f.text_field :name, placeholder: &quot;Name&quot; %&amp;gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  &lt;/</span><span class="n">div</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  &lt;div id=&quot;questions&quot; class=&quot;field&quot;&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= f.fields_for :questions do |builder| %&amp;gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;div class=</span><span class="s2">&quot;question&quot;</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= builder.text_field :content, placeholder: &quot;Question&quot; %&amp;gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;/div&amp;gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&amp;gt;</span>
</span><span class='line'><span class="sx">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;  &lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;  &amp;lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Create</span> <span class="n">topic</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
This creates a simple form which allows you to create a topic with a name and add one question to it.</p>

<h3>Controller &amp; Routes</h3>

<p>The controller method for create is your regular create method, nothing fancy. That&rsquo;s why I love Rails.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/topics_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TopicsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def new&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@topic</span> <span class="o">=</span> <span class="no">Topic</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@question</span> <span class="o">=</span> <span class="vi">@topic</span><span class="o">.</span><span class="n">questions</span><span class="o">.</span><span class="n">build</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def create&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@topic</span> <span class="o">=</span> <span class="no">Topic</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">topic_params</span><span class="p">)</span>
</span><span class='line'><span class="k">unless</span> <span class="vi">@topic</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">redirect_to</span> <span class="n">root_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;Successfully created a topic&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">topic_params</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;params.require(:topic).permit(:name, questions_attributes: [:content])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The new method creates the instances for both topic and questions. In the create action we instantiate a topic passing in a method. This is a private method needed in Rails 4 to make sure only the allowed attributes are used. We require the topic parameters and permit the name for a topic and the questions_attributes. Now all we need are the routes and this will work.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">resources</span> <span class="ss">:topics</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now we have a simple version of adding questions to a topic, but we still don&rsquo;t have validations.</p>

<h3>Validations</h3>

<p>It is good practice to have your validations on both the database level and on the Rails model&rsquo;s itself. The validation for the association is not as straightforward as it seems.  A common approach would look like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/topic.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:questions</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  validates :name, presence: true</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/question.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Question</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:topic</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:topic_id</span><span class="p">,</span>  <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These are simple validations that would normally pass but they won&rsquo;t because of the nested forms. You need to tell Rails that the two model relations describe the same relationship but from the opposite direction. Rails provides a method for this, inverse_of. Rails has a method for everything.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/topic.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Topic</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:questions</span><span class="p">,</span> <span class="n">inverse_of</span> <span class="ss">:topic</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:questions</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  validates :name, presence: true</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/question.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Question</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:topic</span><span class="p">,</span> <span class="n">inverse_of</span> <span class="ss">:questions</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:topic</span><span class="p">,</span>  <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see we indicated the inverse of relation from both sides. Also now the Question model validates the topic itself instead of the ID.</p>

<p>There you have it, a form that accepts nested attributes in Rails 4 with validations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Secure and Versioned API in Rails]]></title>
    <link href="http://shivamd.github.io/blog/2013/11/01/creating-a-secure-and-versioned-api-in-rails/"/>
    <updated>2013-11-01T23:55:00+04:00</updated>
    <id>http://shivamd.github.io/blog/2013/11/01/creating-a-secure-and-versioned-api-in-rails</id>
    <content type="html"><![CDATA[<p>Been working on a side project with a friend and we were at the point where we needed to build an API for the code we had written. The idea was to build an API which can be accessed by our customers with an API key.</p>

<p>After some research, I found couple  of gems that make it easy to do this. <a href="https://github.com/filtersquad/rocket_pants">Rocket Pants</a> and <a href="https://github.com/bploetz/versionist">Versionist</a>. In order to reduce the dependencies, I decided to build it myself with the help of <a href="https://railscasts.com">RailsCasts</a>.</p>

<h3>Creating the API.</h3>

<p>We will start off by creating the routes for it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;namespace :api do</span>
</span><span class='line'><span class="sr">  namespace :v1 do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">namespace</span> <span class="ss">:search</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">get</span> <span class="s2">&quot;youtube&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This block of code gives us the following route:
<code>
/api/v1/search/youtube
</code></p>

<p>Now in order to create the controller, since they are namespaced under api and the version number you must put the controller inside the two modules.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/api/v1/search_controller.rb</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class SearchController &amp;lt; ApplicationController</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def youtube</span>
</span><span class='line'><span class="sr">    #code that searches for youtube videos</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now doing the following should give you a list of YouTube results in a JSON format.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl yoururl.com/api/v1/search/youtube?query<span class="o">=</span>funny
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This setup gives us the ability to easily add new versions of the API while maintaining backwards compatibility. The only thing is that the API is not secure.</p>

<h3>Securing the API.</h3>

<p>There are a few ways you can do this. Instead of doing it with OAuth I just created an access token given to each application created. The access token is created using a SecureRandom.hex string.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="c1">#code for authentication&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">has_many</span> <span class="ss">:applications</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Application &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  before_create :generate_access_token&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">belongs_to</span> <span class="ss">:user</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">generate_access_token</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;begin </span>
</span><span class='line'><span class="sr">  self.access_token = SecureRandom.hex</span>
</span><span class='line'><span class="sr">end while self.class.exists?(access_token: access_token)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The way I set this up is that a user can have many applications, and each application belongs to a user. Before an application is created there is a unique key which is generated restricing access to the API.
There are other columns you can add to the model if needed such as permissions, expires_at etc.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/api/v1/search_controller.rb</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class SearchController &amp;lt; ApplicationController</span>
</span><span class='line'><span class="sr">  before_filter :restrict_access</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def youtube</span>
</span><span class='line'><span class="sr">    #code that searches for youtube videos</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  private </span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def restrict_access</span>
</span><span class='line'><span class="sr">    app = Application.find_by_access_token(params[:access_token])</span>
</span><span class='line'><span class="sr">    head :unauthorized unless app</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Updating the controller in order to send an unauthorized response if the access key is invalid. Now in order to make a request the user has to send in the right access_token in the parameters. Also make sure to not make the access_token field accessible using attr_accessible or in rails 4 you can do the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/applications.rb</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class ApplicationsController &amp;lt; ApplicationController</span>
</span><span class='line'><span class="sr">  #code for controller&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@application = current_user.applications.build(application_params)</span>
</span><span class='line'><span class="sr">#code to save application</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def application_params&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Instead of directly passing in the params[:application] we pass the build method a method itself. This private method makes sure to only permit the application name.</p>

<p>Since the output of my controllers were already in JSON there was no need for <a href="https://github.com/nesquena/rabl">RABL</a>. Also for those looking for something lightweight can have a look at <a href="https://github.com/rails-api/rails-api">Rails-API</a>. This is enough to get you started if you any questions leave comments and I shall address them.</p>
]]></content>
  </entry>
  
</feed>
